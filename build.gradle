buildscript 
{
    repositories 
    {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.yaml:snakeyaml:1.18'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

if (project.hasProperty("dev")) 
{
    version += "-dev" + dev
}

group = "mchorse.aperture"
archivesBaseName = "aperture"
sourceCompatibility = targetCompatibility = "1.8"

compileJava 
{
    sourceCompatibility = targetCompatibility = "1.8"
}

/* Minecraft configuration */

minecraft 
{
    version = "${mc_version}-${forge_version}"
    runDir = "run"
    mappings = snapshot
    
    clientJvmArgs = ["-Xmx1G"]
    serverJvmArgs = ["-Xmx1G"]
    
    replace "%VERSION%", project.version
    replace "%MCLIB%", project.mclib
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies 
{
    compile files("run/libs/mclib-${mclib}-${project.minecraft.version}-dev.jar")
    compile files("run/libs/Minema-${minema}-${project.minecraft.version}-dev.jar")
    deobfCompile('mchorse:mclib-2.0.1-1.12.2')
    deobfCompile('info:Minema-3.5.2-1.12.2')

}

eclipse
{
    classpath
    {
        file
        {
            whenMerged
            { classpath -> 
                def ver = project.minecraft.version
                /* Fucking gradle 2.14 doesn't have fileReference() method,
                 * screw you piece of shit */
                def getMeReference = { File file ->
                	return [
                		getFile: { return file },
                		getPath: { return file.getAbsolutePath() },
                		getJarURL: { return file.getAbsolutePath() },
                		isRelativeToPathVariable: { return false }
                	] as org.gradle.plugins.ide.eclipse.model.FileReference
                }
                
                def lib = entries.find { it.path.contains "mclib-${mclib}" }  
                lib.sourcePath = getMeReference(file("run/libs/mclib-${mclib}-${ver}-sources.jar"))
            }
        }
    }
}

/* Dev builds */

task deobfJar(type: Jar) {  
    from sourceSets.main.output 
    classifier = 'dev'  
}   

artifacts 
{    
    archives deobfJar   
}

processResources
{
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    project.version += "-" + project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}